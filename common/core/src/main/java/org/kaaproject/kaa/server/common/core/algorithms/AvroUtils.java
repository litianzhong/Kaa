/**
 *  Copyright 2014-2016 CyberVision, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.kaaproject.kaa.server.common.core.algorithms;

import static org.kaaproject.kaa.server.common.core.algorithms.CommonConstants.KAA_NAMESPACE;
import static org.kaaproject.kaa.server.common.core.algorithms.CommonConstants.UUID_SIZE;
import static org.kaaproject.kaa.server.common.core.algorithms.CommonConstants.UUID_TYPE;

import java.nio.ByteBuffer;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.avro.JsonProperties;
import org.apache.avro.Schema;
import org.apache.avro.Schema.Type;
import org.apache.avro.generic.GenericData;
import org.codehaus.jackson.JsonNode;

public class AvroUtils {


    /**
     * Generates UUID bytes.
     *
     * @return list of generated bytes.
     */
    public static byte [] generateUUIDBytes() {
        UUID uuid = UUID.randomUUID();

        ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[UUID_SIZE]);
        byteBuffer.putLong(uuid.getMostSignificantBits());
        byteBuffer.putLong(uuid.getLeastSignificantBits());

        return byteBuffer.array();
    }

    public static GenericData.Fixed generateUuidObject() {
        Schema avroSchema = Schema.createFixed(UUID_TYPE, null, KAA_NAMESPACE, UUID_SIZE);
        return new GenericData.Fixed(avroSchema, generateUUIDBytes());
    }

    public static Schema getSchemaByType(Schema schema, Schema.Type type) {
        if (schema.getType().equals(type)) {
            return schema;
        }
        if (schema.getType().equals(Type.UNION)) {
            List<Schema> types = schema.getTypes();
            if (types != null) {
                for (Schema typeIter : types) {
                    if (typeIter.getType().equals(type)) {
                        return typeIter;
                    }
                }
            }
        }
        return null;
    }

    public static boolean isComplexSchema(Schema schema) {
        switch (schema.getType()) {
        case RECORD:
        case ARRAY:
        case MAP:
        case FIXED:
        case ENUM:
            return true;
        default:
            return false;
        }
    }

    public static void copyJsonProperties(JsonProperties src, JsonProperties dst) {
        for (Map.Entry<String, JsonNode> prop : src.getJsonProps().entrySet()) {
            dst.addProp(prop.getKey(), prop.getValue());
        }
    }

}
